* {
  user-select: none;
  outline: none;
}

:root {
  --color: yellow;
  --l: 15%;

  --size: min(85vh, 80vw);
  --btn-height: calc(var(--size) * 0.025);
  --front: 1;
  --back: 0;
  --front-rotate: 360deg;
  --back-rotate: 180deg;
}

html[theme="dark-mode"] {
  /* ! */
  filter: invert(100%) hue-rotate(180deg);
}

body {
  background-color: white;
}

.container {
  width: 1050px;
  margin: auto;
}

.keyboard {
  /* 3d */
  display: flex;
  flex-direction: column;
  gap: 1em;
  font-size: calc(var(--size) * 0.0175);
  background-color: var(--color);
  padding: 0.6em;
  position: relative;
  transform-style: preserve-3d;
  transform: perspective(600px) rotateX(25deg) rotateZ(0deg);
  animation: color-shift 30s infinite linear;
  transition: 100ms ease-out;
}

.keyboard * {
  transform-style: preserve-3d;
}

.row {
  /* ! */
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  position: relative;
  height: 45px;
}

.key-front .two-value,
.key-back .two-value {
  width: 100%;
  text-align: center;
}

.menu {
  /* ! */
  display: flex;
}

.switch {
  position: relative;
  width: 60px;
  height: 34px;
}

.switch input {
  display: none;
}

.slider {
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  position: absolute;
  cursor: pointer;
  background-color: gray;
  border-radius: 34px;
  transition: 0.4s;
}

/* ! */
.slider::before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  transition: 0.5s;
  border-radius: 50%;
}

input:checked + .slider {
  background-color: black;
}

input:checked + .slider::before {
  /* ! */
  transform: translateX(26px);
}

.select-box {
  position: relative;
  margin-left: 60px;
  height: 34px;
}

.select-box select {
  /* ! */
  font-size: 0.9rem;
  /* ! */
  padding: 2px 5px;
  height: 34px;
  width: 200px;
}

.input-group {
  margin: 100px 0px;
}

.input {
  border: none;
  border-bottom: 2px solid lightgrey;
  width: 1050px;
  height: 50px;
  font-size: 30px;
  text-align: center;
  display: block;
}

@keyframes color-shift {
  0% {
    --color: hsl(0deg, 100%, 50%);
  }
  12.5% {
    --color: hsl(45deg, 100%, 50%);
  }
  25% {
    --color: hsl(90deg, 100%, 50%);
  }
  37.5% {
    --color: hsl(135deg, 100%, 50%);
  }
  50% {
    --color: hsl(180deg, 100%, 50%);
  }
  62.5% {
    --color: hsl(225deg, 100%, 50%);
  }
  75% {
    --color: hsl(270deg, 100%, 50%);
  }
  87.5% {
    --color: hsl(315deg, 100%, 50%);
  }
  100% {
    --color: hsl(360deg, 100%, 50%);
  }
}

@property --color {
  syntax: "<color>";
  inherits: true;
  initial-value: yellow;
}

/* 각 키의 앞, 뒤부분에 해당하는 스타일
    두 개의 요소가 합쳐지면 마치 하나의 박스처럼 보이게 된다.
    transform-style은 해당 요소가 3d처럼 나타낼 수 있게 해주는 옵션이다 
*/
.key-front,
.key-back {
  display: flex;
  justify-content: center;
  flex-direction: column;
  width: 100%;
  color: var(--color);
  font-weight: bold;
  height: calc(var(--size) * 0.06);
  min-width: calc(var(--size) * 0.065);
  text-align: center;
  background-color: hsl(240deg, 20%, calc(var(--l) + 5%));
  position: absolute;
  text-shadow: 0 0 0.125em var(--color);
  transform-style: preserve-3d;
  transition: transform 500ms ease-in-out;
}

.key-front {
  transform: rotateY(var(--front-rotate))
    translateZ(calc(var(--btn-height) * var(--front)));
}

.key-back {
  transform: rotateY(var(--back-rotate))
    translateZ(calc(var(--btn-height) * var(--back)));
}

.key-front:after {
  height: 100%;
  width: var(--btn-height);
  top: 0;
  left: 100%;
  background-color: hsl(240deg, 20%, calc(var(--l) + 10%));
  transform-origin: center left;
  transform: rotateY(90deg);
}

.key-front:before {
  height: var(--btn-height);
  width: 100%;
  top: 100%;
  left: 0;
  background-color: hsl(240deg, 20%, calc(var(--l)));
  transform-origin: top center;
  transform: rotateX(-90deg);
}

.key-back:after {
  height: 100%;
  width: var(--btn-height);
  top: 0;
  left: 100%;
  background-color: hsl(240deg, 20%, calc(var(--l) + 10%));
  transform-origin: center left;
  transform: rotateY(90deg);
}

.key-back:before {
  height: var(--btn-height);
  width: 100%;
  top: 0;
  left: 0;
  background-color: hsl(240deg, 20%, calc(var(--l)));
  transform-origin: top center;
  transform: rotateX(-90deg);
}

/* 가상선택자
  아래의 가상선택자 스타일을 지정해주는 이유는
  각 키의 위, 아래, 좌, 우를 보면 입체적으로 나타내기 위한 판이 있다.
  이를 위해서 공통적으로 필요한 스타일을 아래처럼 적용
*/
.key-front:after,
.key-front:before,
.key-back:after,
.key-back:before {
  content: "";
  position: absolute;
  transition: 500ms ease-out;
}

/*
  key-wrap는 row의 하위 요소이므로 상위 요소인 row의 높이를 상속받는다.
*/
.key-wrap {
  position: relative;
  height: inherit;
  width: 60px;
  transition: 100ms ease-out;
}

/* 각 키를 눌렀을 때 적용되는 스타일
  눌러진 효과를 주기 위해서 버튼의 높이 * -0.5를 요소의 높이에 할당한다
*/
.key-wrap.active {
  transform: translateZ(calc(var(--btn-height) * -0.5));
  text-shadow: 0 0 0.25em var(--color);
}

/* 각 요소의 절대적인 너비를 정해준다. */

.tab-key {
  width: 90px;
}

.enter-key {
  width: 130px;
}

.caps-lock-key {
  width: 110px;
}

.back-slash-key {
  width: 100px;
}

.back-space-key {
  width: 120px;
}

.shift-key {
  width: 150px;
}

.ctrl {
  width: 130px;
}

.space-key {
  width: 400px;
}
